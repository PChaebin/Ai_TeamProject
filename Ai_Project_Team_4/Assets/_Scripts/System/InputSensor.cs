using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using UnityEngine;
using System.IO;
using UnityEngine.UI;
using System.Text;

public class InputSensor : MonoBehaviour
{

    //감지영역
    [Header("collider")]
    public Collider2D Collider;
    // 돌리세요!
    [Header("isTurning")]
    public bool isTurning = false;

    //왼팔 오른팔 손끝
    [Header("LeftArmPoint")]
    public GameObject leftArmPoint;
    [Header("RightArmPoint")]
    public GameObject rightArmPoint;

    //왼팔 오른팔 
    [Header("LeftArm")]
    public GameObject leftArm;
    [Header("RightArm")]
    public GameObject rightArm;

    //입력값과 출력값 리스트들
    [Header("InputLayerNode")]
    [SerializeField]
    private float[] inputLayerNode;
    [Header("OutputLayerNode")]
    [SerializeField]
    private float[] outputLayerNode;

    [Header("Uses I")]
    float[,] weightIH;
    [Header("Uses O")]
    float[,] weightHO;
    [Header("final gen")]
    List<float[,]> finalGen;

    //유전자개체 리스트와 객체인덱스와 세대수와 평가함수
    [Header("Generaton")]
    public List<List<float[,]>> generatons = new List<List<float[,]>>();
    [Header("current Generaton Index")]
    public int genIndex = 0;
    [Header("Fitness")]
    public List<float> fitness = new List<float>();
    [Header("Genraton Seed")]
    public int seed = 1;

    //개체수
    [Header("generaton n")]
    public int genN = 128;
    [Header("gen I")]
    public int genI = 35;
    [Header("gen O")]
    public int genO = 20;
    //최대세대
    [Header("seed n")]
    public int seedN = 100;
    //엘리트 수
    [Header("eleitm")]
    public int ele = 4;

    [Header("Mutate1")]
    public float mutate1 = 55f;
    [Header("Mutate2")]
    public float mutate2 = 35f;

    //팔과탄환최대거리
    [Header("maxDist")]
    public float maxDist = 1.5f;

    // Update is called once per frame
    void Start()
    {
        InitObject();//유전자 개체 64개 생성  
        outputLayerNode = new float[4] { 10,0,0,0 };
    }

    private void FixedUpdate()
    {
        if(isTurning)
        {
            // 반환 값 팔 돌리기 
            rotateAction(outputLayerNode);
        }
    }

    /// <summary>
    /// 발사체 감지후 입력값 생성하고 팔 돌리는 출력 값 반환 
    /// </summary>
    /// <param name="collision"></param>
    private void OnTriggerStay2D(Collider2D collision)
    {
        if (collision.gameObject.CompareTag("Projectile"))
        {
            isTurning = true;
            SetDistanceToProjectile(GetDistanceToProjectile(collision.gameObject));
            SetDistanceToLeftArm(GetDistanceToLeftArm(collision.gameObject));
            SetDistanceToRightArm(GetDistanceToRightArm(collision.gameObject));
            SetPositionPlusToLeftArm(GetPositionPlusToLeftArm(collision.gameObject));
            SetPositionMinusToLeftArm(GetPositionMinusToLeftArm(collision.gameObject));
            SetPositionPlusToRightArm(GetPositionPlusToRightArm(collision.gameObject));
            SetPositionMinusToRightArm(GetPositionMinusToRightArm(collision.gameObject));

            outputLayerNode = NerualNetwork(inputLayerNode);
            SetFitness(leftArmPoint, rightArmPoint, collision.gameObject);
        }
        isTurning = false;
    }

    /// <summary>
    /// 신경망에서 계산한 출력값 기반 팔 돌리기 함수 
    /// </summary>
    /// <param name="outPut"></param>
    public void rotateAction(float[] outPut)
    {
        float actionValue = outPut.Max();
        int actionIndex = Array.IndexOf(outPut, actionValue);
        //Debug.Log("index : " + actionIndex);
        switch (actionIndex)
        {
            case 0:
                rightArm.transform.Rotate(Vector3.forward, 3f);
                break;
            case 1:
                rightArm.transform.Rotate(Vector3.forward, -3f);
                break;
            case 2:
                leftArm.transform.Rotate(Vector3.forward, 3f);
                break;
            case 3:
                leftArm.transform.Rotate(Vector3.forward, -3f);
                break;
            default:
                Debug.Log("notting");
                break;
        }
    }

    /// <summary>
    /// 가중치 유전자 기반 신경망으로 출력값 계산 
    /// </summary>
    /// <param name="inputs"></param>
    /// <returns></returns>
    public float[] NerualNetwork(float[] inputs)
    {
        weightIH = generatons[genIndex][0];
        weightHO = generatons[genIndex][1];
        // 1) 은닉층 계산: hidden = weightIH × inputs
        var hidden = new float[5];
        for (int h = 0; h < 5; h++)
        {
            float sum = 0f;
            for (int i = 0; i < 7; i++)
            {
                sum += weightIH[h, i] * inputs[i];
            }
            hidden[h] = Sigmoid(sum);
        }

        // 2) 출력층 계산: output = weightHO × hidden
        var output = new float[4];
        for (int o = 0; o < 4; o++)
        {
            float sum = 0f;
            for (int h = 0; h < 5; h++)
            {
                sum += weightHO[o, h] * hidden[h];
            }
            output[o] = Sigmoid(sum);
        }

        return output;
    }

    /// <summary>
    /// 엘리트, 토너먼트 선택과 교배 함수 
    /// </summary>
    IEnumerator SelecteGen()
    {
        //다음 세대에 넣을 것
        List<List<float[,]>> corrosGeneratons = new List<List<float[,]>>();

        // 엘리트 선택 후 다음 세대에 바로 넣어줌 (4개)
        for (int i = 0; i < ele; i++)
        {
            float bestValue = fitness.Max();
            int bestIndex = fitness.FindIndex(x => x == bestValue);
            corrosGeneratons.Add(generatons[bestIndex]);
        }

        int firstIndex;
        int secondIndex;

        float gen1;
        float gen2;

        List<List<float[,]>> tonement = new List<List<float[,]>>();

        // 토너먼트진행, 64개의 절반인 32개 선택
        for (int i = 0; i < genN/2; i++)
        {
            // Get first random index
            firstIndex = UnityEngine.Random.Range(0, generatons.Count);

            // Get second random index ensuring it's different from firstIndex
            secondIndex = UnityEngine.Random.Range(0, generatons.Count - 1);
            if (secondIndex >= firstIndex)
                secondIndex++;

            gen1 = fitness[firstIndex];
            gen2 = fitness[secondIndex];

            if (gen1 >= gen2)
            {
                tonement.Add(generatons[firstIndex]);
            }
            else
            {
                tonement.Add(generatons[secondIndex]);
            }
        }

        int par1indx;
        int par2indx;

        List<float[,]> parent1;
        List<float[,]> parent2;

        // 다점 교배 진행
        while (corrosGeneratons.Count < generatons.Count)
        {
            List<float[,]> child1 = new List<float[,]>();
            List<float[,]> child2 = new List<float[,]>();

            par1indx = UnityEngine.Random.Range(0, tonement.Count);
            par2indx = UnityEngine.Random.Range(0, tonement.Count -1 );
            if (par2indx >= par1indx)
                par2indx++;

            parent1 = tonement[par1indx];
            parent2 = tonement[par2indx];

            // 1) 절단점 개수 지정
            int numPoints = 2;

            // 2) [1, parent1.Count) 범위에서 중복 없이 절단점 생성
            List<int> points = new List<int>();
            while (points.Count < numPoints)
            {
                int p = UnityEngine.Random.Range(1, parent1.Count);
                if (!points.Contains(p))
                    points.Add(p);
            }
            points.Sort();            // 오름차순 정렬
            points.Add(parent1.Count); // 마지막은 전체 길이

            // 4) 절단점 사이 구간을 번갈아 가며 붙여넣기
            int last = 0;
            bool takeFromP1 = true;
            foreach (int cut in points)
            {
                int len = cut - last;
                if (takeFromP1)
                {
                    // parent1 → child1, parent2 → child2
                    child1.AddRange(parent1.GetRange(last, len));
                    child2.AddRange(parent2.GetRange(last, len));
                }
                else
                {
                    // parent2 → child1, parent1 → child2
                    child1.AddRange(parent2.GetRange(last, len));
                    child2.AddRange(parent1.GetRange(last, len));
                }
                takeFromP1 = !takeFromP1;
                last = cut;
            }
            corrosGeneratons.Add(child1);
            corrosGeneratons.Add(child2);
            yield return new WaitForSeconds(0.02f);
        }

        float mutate = 0;
        int idx = 0;
        int x = 0;
        int y = 0;

        for (int j =3; j < genN; j++)
        {
            mutate = UnityEngine.Random.value * 100;
            if(mutate < mutate1)
            {
                idx = UnityEngine.Random.Range(0, genI);
                y = idx % 5;
                x = idx / 5;
                corrosGeneratons[j][0][y,x] = UnityEngine.Random.Range(10,80);
            }
            if (mutate < mutate2)
            {
                idx = UnityEngine.Random.Range(0, genO);
                y = idx % 4;
                x = idx / 4;
                corrosGeneratons[j][1][y, x] = UnityEngine.Random.Range(10, 80);
            }
        }

        generatons = corrosGeneratons;

        seed++;
        genIndex = 0;
    }

    public void WriteFileGreateGen()
    {
        float mx = fitness.Max();
        int idx = fitness.IndexOf(mx);
        List<float[,]> eleGen = generatons[idx];
        
        string path = Path.Combine("D:\\UnityHub\\UnityGame\\Ai_TeamProject\\Ai_Project_Team_4\\Assets\\_Scripts\\System", "eletism");
        using (StreamWriter writer = new StreamWriter(path, false, Encoding.UTF8))
        {
            for (int arrayIndex = 0; arrayIndex < eleGen.Count; arrayIndex++)
            {
                float[,] array2D = eleGen[arrayIndex];
                int rows = array2D.GetLength(0);
                int cols = array2D.GetLength(1);

                // 배열 구분을 위해 헤더 라인 삽입 (선택 사항)
                writer.WriteLine($"# Array {arrayIndex} (행: {rows}, 열: {cols})");

                // 각 행(row)마다 데이터를 한 줄에 콤마(또는 탭)로 구분해서 작성
                for (int r = 0; r < rows; r++)
                {
                    StringBuilder lineBuilder = new StringBuilder();
                    for (int c = 0; c < cols; c++)
                    {
                        lineBuilder.Append(array2D[r, c].ToString());

                        // 마지막 열이 아니면 구분자 추가
                        if (c < cols - 1)
                            lineBuilder.Append(",");  // 콤마(,)로 구분. 필요 시 '\t'로 변경 가능
                    }

                    writer.WriteLine(lineBuilder.ToString());
                }

                // 배열 간에 빈 줄 하나 추가 (선택 사항)
                writer.WriteLine();
            }
        }
        Debug.Log($"데이터를 다음 경로에 저장했습니다: {path}");

    }

    public List<float[,]> ReadFileGreateGen()
    {
        List<float[,]> result = new List<float[,]>();
        string path = Path.Combine("D:\\UnityHub\\UnityGame\\Ai_TeamProject\\Ai_Project_Team_4\\Assets\\_Scripts\\System", "eletism");
        if (!File.Exists(path))
        {
            Debug.LogWarning($"파일이 존재하지 않습니다: {path}");
            return result;
        }

        // 모든 라인을 한꺼번에 읽어온다 (UTF8)
        string[] lines = File.ReadAllLines(path, Encoding.UTF8);

        int i = 0;
        while (i < lines.Length)
        {
            string line = lines[i].Trim();

            // 빈 줄(또는 공백)인 경우 다음 라인으로 넘어감
            if (string.IsNullOrEmpty(line))
            {
                i++;
                continue;
            }

            // 헤더 형식: "# Array {index} (행: {rows}, 열: {cols})"
            if (line.StartsWith("# Array"))
            {
                // 헤더를 건너뛴 뒤, 실제 데이터 라인을 수집한다.
                i++;

                // 한 배열의 각 행(row)을 담을 리스트
                List<string> rowLines = new List<string>();

                // 빈 줄이 나오기 전까지 계속 읽는다.
                while (i < lines.Length && !string.IsNullOrEmpty(lines[i].Trim()))
                {
                    rowLines.Add(lines[i].Trim());
                    i++;
                }

                // rowLines.Count가 곧 행 개수
                int rowCount = rowLines.Count;
                if (rowCount == 0)
                {
                    // 만약 빈 배열(헤더만 있고 데이터 없음)인 경우, 0×0 배열로 처리하거나 건너뛸지 결정
                    result.Add(new float[0, 0]);
                    continue;
                }

                // 첫 행에서 콤마 개수로 열(column) 개수를 추정
                string[] firstTokens = rowLines[0].Split(',');
                int colCount = firstTokens.Length;

                // 2D 배열 생성
                float[,] array2D = new float[rowCount, colCount];

                // 실제 데이터 파싱
                for (int r = 0; r < rowCount; r++)
                {
                    string[] tokens = rowLines[r].Split(',');

                    // (안정성) 열 개수가 다를 경우, 작은 쪽만 처리
                    int tokensToRead = Mathf.Min(tokens.Length, colCount);

                    for (int c = 0; c < tokensToRead; c++)
                    {
                        // float.Parse 로 문자열을 실수로 변환
                        if (float.TryParse(tokens[c], out float parsed))
                        {
                            array2D[r, c] = parsed;
                        }
                        else
                        {
                            // 파싱 실패 시 로그 남기고 0으로 채움
                            Debug.LogWarning($"[{r},{c}] 위치 값 '{tokens[c]}'를 float로 파싱할 수 없습니다. 0으로 설정합니다.");
                            array2D[r, c] = 0f;
                        }
                    }

                    // 만약 토큰 수가 colCount보다 적다면 나머지 열은 기본 0으로 남음
                }

                // 완성된 2D 배열을 결과 리스트에 추가
                result.Add(array2D);

                // now i는 빈 줄(또는 파일 끝)위치에 있으므로, 빈 줄을 건너뛸 것
                // (while 루프 시작부에서 빈 줄을 걸러줌)
            }
            else
            {
                // 헤더가 아닌(예상치 못한) 일반 라인이 온 경우 건너뛴다.
                Debug.LogWarning($"헤더('# Array')가 아닌 예기치 않은 라인: '{line}' (라인 {i + 1})");
                i++;
            }
        }
        return result;
    }

    /// <summary>
    /// 평가함수 
    /// </summary>
    public void SetFitness(GameObject leftPoint, GameObject rightPoint, GameObject projectileObj)
    {
        float leftdist = maxDist - (leftPoint.transform.position - projectileObj.transform.position).magnitude;
        if(leftdist < 0)
        {
            leftdist = 0;
        }
        float rightdist = maxDist - (rightPoint.transform.position - projectileObj.transform.position).magnitude;
        if (rightdist < 0)
        {
            rightdist = 0;
        }
        float total = rightdist + leftdist;
        if (total >= 30f)
        {
            total = 30f;
        }
        fitness[genIndex] += total;
    }

    public void UpGenIndex()
    {
        genIndex++;
        if (genIndex >= 64)
        {
            StartCoroutine(SelecteGen());
        }
    }

    /// <summary>
    /// 입력값을 리스트에 입력하기 총 7개 탄환까지의 거리, 왼팔거리, 왼팔 좌, 왼팔 우, 오른팔거리, 오른팔 좌, 오른팔 우 
    /// </summary>
    /// <param name="distanceToProjectile"></param>
    public void SetDistanceToProjectile(float distanceToProjectile)
    {
        inputLayerNode[0] = distanceToProjectile;
    }
    public void SetDistanceToLeftArm(float distanceToLeftArm)
    {
        inputLayerNode[1] = distanceToLeftArm;
    }
    public void SetPositionPlusToLeftArm(float positionPlusToLeftArm)
    {
        inputLayerNode[2] = positionPlusToLeftArm;
    }
    public void SetPositionMinusToLeftArm(float positionPlusToLeftArm)
    {
        inputLayerNode[3] = positionPlusToLeftArm;
    }
    public void SetDistanceToRightArm(float distanceToRightArm)
    {
        inputLayerNode[4] = distanceToRightArm;
    }
    public void SetPositionPlusToRightArm(float positionPlusToRightArm)
    {
        inputLayerNode[5] = positionPlusToRightArm;
    }
    public void SetPositionMinusToRightArm(float positionPlusToLeftArm)
    {
        inputLayerNode[6] = positionPlusToLeftArm;
    }

    /// <summary>
    /// 발사체로부터 거리, 위치 왼팔, 오른팔, 히트박스 기준으로 각각 구하기 총 7개 
    /// </summary>
    /// <param name="projectile"></param>
    /// <returns></returns>
    public float GetDistanceToProjectile(GameObject projectile)
    {
        float distanceToProjectile = (projectile.transform.position - this.transform.position).magnitude;
        return distanceToProjectile;
    }
    public float GetDistanceToLeftArm(GameObject projectile)
    {
        float distanceToLeftArm = (projectile.transform.position - leftArmPoint.transform.position).magnitude;
        return distanceToLeftArm;
    }
    public float GetPositionPlusToLeftArm(GameObject projectile)
    {
        Vector3 localPos = leftArmPoint.transform.InverseTransformPoint(projectile.transform.position);

        if(localPos.x > 0f)
        {
            return 1f;
        }
        return 0f;
    }
    public float GetPositionMinusToLeftArm(GameObject projectile)
    {
        Vector3 localPos = leftArmPoint.transform.InverseTransformPoint(projectile.transform.position);

        if (localPos.x < 0f)
        {
            return 1f;
        }
        return 0f;
    }
    public float GetDistanceToRightArm(GameObject projectile)
    {
        float distanceToRightArm = (projectile.transform.position - rightArmPoint.transform.position).magnitude;
        return distanceToRightArm;
    }
    public float GetPositionPlusToRightArm(GameObject projectile)
    {
        Vector3 localPos = rightArmPoint.transform.InverseTransformPoint(projectile.transform.position);

        if (localPos.x > 0f)
        {
            return 1f;
        }
        return 0f;
    }
    public float GetPositionMinusToRightArm(GameObject projectile)
    {
        Vector3 localPos = rightArmPoint.transform.InverseTransformPoint(projectile.transform.position);

        if (localPos.x < 0f)
        {
            return 1f;
        }
        return 0f;
    }

    /// <summary>
    /// 신경망 가중치 유전자조합을 가진 객체 64개 생성 
    /// </summary>
    public void InitObject()
    {
        for (int c = 0; c < genN; c++)
        {
            generatons.Add(InitGeneratons());
            fitness.Add(0);
        }
    }
    public List<float[,]> InitGeneratons()
    {
        float[,] ih = new float[5, 7];
        float[,] ho = new float[4, 5];
        for (int h = 0; h < 5; h++)
        {
            for (int i = 0; i < 7; i++)
            {
                ih[h, i] = UnityEngine.Random.Range(10,80);
            }
        }
        for (int o = 0; o < 4; o++)
        {
            for (int h = 0; h < 5; h++)
            {
                ho[o, h] = UnityEngine.Random.Range(10,80);
            }
        }
        List<float[,]> generaton = new List<float[,]>();
        generaton.Add(ih);
        generaton.Add(ho);
        return generaton;
    }
    public float[,] DeepCopy(float[,] source)
    {
        int rows = source.GetLength(0);
        int cols = source.GetLength(1);
        var dest = new float[rows, cols];
        for (int y = 0; y < rows; y++)
        {
            for (int x = 0; x < cols; x++)
            {
                dest[y, x] = source[y, x];
            }
        }
        return dest;
    }
    private static float Sigmoid(float x)
    {
        // e^(-x) 계산
        return 1f / (1f + Mathf.Exp(-x));
    }
}
